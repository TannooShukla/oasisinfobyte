# -*- coding: utf-8 -*-
"""Oasis_task5_Sales Prediction using Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e5lMm-Q6Z-iH_GwTbfHlz2Z4HR0wYUZG

**Step 1: Import** **Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""**Step 2: Load and Explore the Dataset**"""

# Load the dataset
df = pd.read_csv("Advertising.csv")

# View first 5 rows
print(df.head())

# Get dataset info
print(df.info())

"""**Step 3: Clean the Data**"""

# Drop unnecessary column
df = df.drop(columns=["Unnamed: 0"])

# Check for missing values
print(df.isnull().sum())

"""**Step 4: Visualize the Data **"""

# Pairplot for quick overview
sns.pairplot(df, x_vars=["TV", "Radio", "Newspaper"], y_vars="Sales", height=4, aspect=1, kind="scatter")
plt.suptitle("Advertisement Spend vs Sales")
plt.show()

# Heatmap for correlation
sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
plt.title("Feature Correlation")
plt.show()

"""**Step 5: Prepare Data for Model**"""

# Independent variables
X = df[["TV", "Radio", "Newspaper"]]

# Dependent variable
y = df["Sales"]

# Train-test split (80-20)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**Step 6: Train the Linear Regression Model**"""

model = LinearRegression()
model.fit(X_train, y_train)

"""#  Step 7: Make Predictions"""

y_pred = model.predict(X_test)

"""**Step 8: Evaluate the Model**"""

# Mean Squared Error
mse = mean_squared_error(y_test, y_pred)

# R² Score
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R² Score: {r2:.2f}")

"""**Step 9: Visualize Actual vs Predicted Sales**"""

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue', alpha=0.6)
plt.plot([y.min(), y.max()], [y.min(), y.max()], '--r', lw=2)
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("Actual vs Predicted Sales")
plt.grid(True)
plt.show()

